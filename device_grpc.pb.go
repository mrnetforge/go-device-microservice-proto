// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protos/device.proto

package go_device_microservice_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceGateway_Communicate_FullMethodName    = "/device.DeviceGateway/Communicate"
	DeviceGateway_SendCommand_FullMethodName    = "/device.DeviceGateway/SendCommand"
	DeviceGateway_GenerateConfig_FullMethodName = "/device.DeviceGateway/GenerateConfig"
)

// DeviceGatewayClient is the client API for DeviceGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGatewayClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeviceMessage, DeviceMessage], error)
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	GenerateConfig(ctx context.Context, in *GenerateConfigRequest, opts ...grpc.CallOption) (*GenerateConfigResponse, error)
}

type deviceGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGatewayClient(cc grpc.ClientConnInterface) DeviceGatewayClient {
	return &deviceGatewayClient{cc}
}

func (c *deviceGatewayClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeviceMessage, DeviceMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceGateway_ServiceDesc.Streams[0], DeviceGateway_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeviceMessage, DeviceMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceGateway_CommunicateClient = grpc.BidiStreamingClient[DeviceMessage, DeviceMessage]

func (c *deviceGatewayClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, DeviceGateway_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGatewayClient) GenerateConfig(ctx context.Context, in *GenerateConfigRequest, opts ...grpc.CallOption) (*GenerateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateConfigResponse)
	err := c.cc.Invoke(ctx, DeviceGateway_GenerateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGatewayServer is the server API for DeviceGateway service.
// All implementations must embed UnimplementedDeviceGatewayServer
// for forward compatibility.
type DeviceGatewayServer interface {
	Communicate(grpc.BidiStreamingServer[DeviceMessage, DeviceMessage]) error
	SendCommand(context.Context, *SendCommandRequest) (*CommandResponse, error)
	GenerateConfig(context.Context, *GenerateConfigRequest) (*GenerateConfigResponse, error)
	mustEmbedUnimplementedDeviceGatewayServer()
}

// UnimplementedDeviceGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceGatewayServer struct{}

func (UnimplementedDeviceGatewayServer) Communicate(grpc.BidiStreamingServer[DeviceMessage, DeviceMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedDeviceGatewayServer) SendCommand(context.Context, *SendCommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedDeviceGatewayServer) GenerateConfig(context.Context, *GenerateConfigRequest) (*GenerateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateConfig not implemented")
}
func (UnimplementedDeviceGatewayServer) mustEmbedUnimplementedDeviceGatewayServer() {}
func (UnimplementedDeviceGatewayServer) testEmbeddedByValue()                       {}

// UnsafeDeviceGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGatewayServer will
// result in compilation errors.
type UnsafeDeviceGatewayServer interface {
	mustEmbedUnimplementedDeviceGatewayServer()
}

func RegisterDeviceGatewayServer(s grpc.ServiceRegistrar, srv DeviceGatewayServer) {
	// If the following call pancis, it indicates UnimplementedDeviceGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceGateway_ServiceDesc, srv)
}

func _DeviceGateway_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceGatewayServer).Communicate(&grpc.GenericServerStream[DeviceMessage, DeviceMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceGateway_CommunicateServer = grpc.BidiStreamingServer[DeviceMessage, DeviceMessage]

func _DeviceGateway_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGatewayServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGateway_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGatewayServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGateway_GenerateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGatewayServer).GenerateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGateway_GenerateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGatewayServer).GenerateConfig(ctx, req.(*GenerateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGateway_ServiceDesc is the grpc.ServiceDesc for DeviceGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceGateway",
	HandlerType: (*DeviceGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _DeviceGateway_SendCommand_Handler,
		},
		{
			MethodName: "GenerateConfig",
			Handler:    _DeviceGateway_GenerateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _DeviceGateway_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/device.proto",
}
